eigs2 <- pca_TPM2$sdev^2
eigs2 <- round((eigs2 / sum(eigs2))*100, digits = 2)
pca_df2 <- as.data.frame(scale(pca_TPM2$x))
ps <- ggplot(pca_df2, aes(x=PC1, y=PC2, color = samples2$Race)) + geom_point(size=3) +
geom_text_repel(aes(label = samples2$Alias, colour = samples2$Race), size = 2.5, point.padding = .1, segment.color = 'grey') +
theme_classic() +
ggtitle("PCA Analysis of VCU20 Cohort (minus VPA16)") +
xlab(paste("PC1 (",eigs2[1],"%)",sep="")) +
ylab(paste("PC2 (",eigs2[2],"%)",sep=""))
print(ps)
DE <- read.delim("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/DESeq2_all_results_121319.txt")
idx <- which(DE$padj <= 0.05)
DE_sig <- DE[idx,]
sig_tble <- DE_sig[,c("Ref.TxID","GeneSym","log2FoldChange","padj")]
sig_tble$padj <- format(sig_tble$padj, digits=3)
sig_tble$log2FoldChange <- format(sig_tble$log2FoldChange, digits=2)
kable(sig_tble, caption = "DE Transcripts for B vs W (control)")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000396085_NAV2_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000322166_NOP2_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000620040_DMD_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000415986_GPRASP1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000319445_NA_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000369888_ZNF512B_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000450518_ACTL6A_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000512982_FYB1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000373741_PUM1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000348066_CAMTA2_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000343820_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000407501_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000330513_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000401449_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000405385_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000472042_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000546979_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000547233_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000549253_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000549468_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000549546_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000549780_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000550958_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000551333_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000551402_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000551541_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000551557_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000552383_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000577543_TGIF1_121319.jpg")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/TxPlot_ENST00000618001_TGIF1_121319.jpg")
###################### Plot PCA Analysis ###################
TPM_filt2 <- TPM_filt[,-7]
samples2 <- samples[-7,]
TPM_filt2 <- filter.removeZeroSumRows(TPM_filt2)
pca_TPM2 <- prcomp(t(TPM_filt2), center = TRUE, scale = TRUE)
eigs2 <- pca_TPM2$sdev^2
eigs2 <- round((eigs2 / sum(eigs2))*100, digits = 2)
pca_df2 <- as.data.frame(scale(pca_TPM2$x))
ps <- ggplot(pca_df2, aes(x=PC1, y=PC2, color = samples2$PercentTumor)) + geom_point(size=3) +
geom_text_repel(aes(label = samples2$Alias, colour = samples2$PercentTumor), size = 2.5, point.padding = .1, segment.color = 'grey') +
theme_classic() +
ggtitle("PCA Analysis of VCU20 Cohort (minus VPA16)") +
xlab(paste("PC1 (",eigs2[1],"%)",sep="")) +
ylab(paste("PC2 (",eigs2[2],"%)",sep=""))
print(ps)
```{r, PCA3, echo=FALSE}
###################### Plot PCA Analysis ###################
pca_TPM <- prcomp(t(TPM_filt), center = TRUE, scale = TRUE)
eigs <- round((eigs / sum(eigs))*100, digits = 2)
pca_df <- as.data.frame(scale(pca_TPM$x))
ps <- ggplot(pca_df, aes(x=PC1, y=PC2, color = samples$PercentTumor)) + geom_point(size=3) +
geom_text_repel(aes(label = samples$Alias, colour = samples$PercentTumor), size = 2.5, point.padding = .1, segment.color = 'grey') +
theme_classic() +
ggtitle("PCA Analysis of VCU20 Cohort") +
xlab(paste("PC1 (",eigs[1],"%)",sep="")) +
ylab(paste("PC2 (",eigs[2],"%)",sep=""))
print(ps)
library("ComplexHeatmap")
?ComplexHeatmap
??ComplexHeatmap
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
row.names(TPM)
sig_TPM <- TPM[DE_sig$Ref.TxID,]
View(sig_TPM)
heat_names <- DE_sig$Ref.TxID + "_" + DE_sig$GeneSym
heat_names <- paste(DE_sig$Ref.TxID, "_", DE_sig$GeneSym,sep="")
heat_names
names(sig_TPM)
row.names(sig_TPM)
DE_sig$Ref.TxID
tail(DE_sig$Ref.TxID)
tail(row.names(sig_TPM))
row.names(DE_sig)
head(DE_sig)
tail(DE_sig)
tail(DE_sig$Ref.TxID)
tail(row.names(sig_TPM))
r(row.names(sig_TPM))
tail(row.names(sig_TPM))
order(tail(row.names(sig_TPM)))
tail(order(row.names(sig_TPM)))
row.names(sig_TPM)[tail(order(row.names(sig_TPM)))]
heat_names[tail(order(heat_names))]
View(sig_TPM)
View(sig_tble)
View(DE_sig)
DE_sig$Ref.TxID
as.character(DE_sig$Ref.TxID)
sig_TPM <- TPM[as.character(DE_sig$Ref.TxID),]
View(sig_TPM)
heat_names <- paste(DE_sig$Ref.TxID, "_", DE_sig$GeneSym,sep="")
row.names(sig_TPM) == DE_sig$Ref.TxID
all(row.names(sig_TPM) == DE_sig$Ref.TxID)
row.names(sig_TPM)[row.names(sig_TPM) != DE_sig$Ref.TxID,]
row.names(sig_TPM) != DE_sig$Ref.TxID
row.names(sig_TPM)[which(row.names(sig_TPM) != DE_sig$Ref.TxID)]
#row.names(sig_TPM)[which(row.names(sig_TPM) != DE_sig$Ref.TxID)]
row.names(sig_TPM) <- heat_names
my_annot <- HeatmapAnnotation(df = samples, col = list(Race=c("B"="red", "W" = "blue") ) )
Heatmap(sig_TPM, col = centered_colors, heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = FALSE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=F, show_column_names=F)
Heatmap(as.matrix(sig_TPM), col = centered_colors, heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = FALSE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=F, show_column_names=F)
centered_colors <- center.palette(sig_TPM, palette_length = 100)
centered_colors <- center.palette(log2(sig_TPM+1), palette_length = 100)
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = FALSE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=F, show_column_names=F)
Heatmap(as.matrix(sig_TPM), col = "heat", heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=F, show_column_names=F)
?Heatmap
my_annot
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=F, show_column_names=F)
my_annot <- HeatmapAnnotation(df = samples$Race, col = list(Race=c("B"="red", "W" = "blue") ) )
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=F, show_column_names=F)
my_annot <- HeatmapAnnotation(df = samples[,"Race",drop=FALSE], col = list(Race=c("B"="red", "W" = "blue") ) )
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=F, show_column_names=F)
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
library(ComplexHeatmap)
sig_TPM <- TPM[as.character(DE_sig$Ref.TxID),]
heat_names <- paste(DE_sig$Ref.TxID, "_", DE_sig$GeneSym,sep="")
#row.names(sig_TPM)[which(row.names(sig_TPM) != DE_sig$Ref.TxID)]
row.names(sig_TPM) <- heat_names
my_annot <- HeatmapAnnotation(df = samples[,"Race",drop=FALSE], col = list(Race=c("B"="red", "W" = "blue") ) )
#centered_colors <- center.palette(sig_TPM, palette_length = 100)
#png(filename=paste("Figure_6C_2018.07.25_GeneExpressionHeatmap_mouse_GreaterThan50PercentMouse_Top2000VariableGenes_withWHIM30.png", sep=""), width=2000, height=1200, res=250)
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
#dev.off()
row.names(sig_TPM)[tail(order(row.names(sig_TPM)))]
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(1.5, "cm")),
column_dend_height = unit(2, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_height = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
my_annot <- HeatmapAnnotation(df = samples[,"Race",drop=FALSE], col = list(Race=c("B"="black", "W" = "grey") ) )
#centered_colors <- center.palette(sig_TPM, palette_length = 100)
#png(filename=paste("Figure_6C_2018.07.25_GeneExpressionHeatmap_mouse_GreaterThan50PercentMouse_Top2000VariableGenes_withWHIM30.png", sep=""), width=2000, height=1200, res=250)
Heatmap(as.matrix(sig_TPM), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(sig_TPM), col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
library(circlize)
Heatmap(as.matrix(sig_TPM), col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(sig_TPM), col = colorRamp2(c(0, max(sig_TPM)), c("white", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(log2(sig_TPM+1)), col = colorRamp2(c(0, max(log2(sig_TPM+1))), c("white", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(log2(sig_TPM+1)), col = colorRamp2(c(0, max(log2(sig_TPM+1))), c("grey", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(log2(sig_TPM+1)), col = colorRamp2(c(0, max(log2(sig_TPM+1))), c("blue", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(log2(sig_TPM+1)), col = colorRamp2(c(0, max(log2(sig_TPM+1))), c("pink", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T)
Heatmap(as.matrix(log2(sig_TPM+1)), col = colorRamp2(c(0, max(log2(sig_TPM+1))), c("white", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T, border = T)
Heatmap(as.matrix(log2(sig_TPM+1)), col = colorRamp2(c(0, max(log2(sig_TPM+1))), c("white", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T, border = T, rect_gp = gpar(col = "black", lwd = 1))
Heatmap(as.matrix(log2(sig_TPM+1)), col = colorRamp2(c(0, max(log2(sig_TPM+1))), c("white", "red")), heatmap_legend_param = list(title = "Gene Expression", color_bar = "continuous", grid_height = unit(10, "cm")),
column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"), show_row_dend = TRUE,
clustering_distance_rows = "euclidean", clustering_distance_columns = "euclidean", clustering_method_columns="ward.D2", clustering_method_rows="ward.D2",
top_annotation = my_annot, color_space = "RGB", show_row_names=T, show_column_names=T, border = T, rect_gp = gpar(col = "grey", lwd = 1))
?HeatmapAnnotation
library(knitr)
opts_chunk$set(cache.path='cache/', fig.path='img/', cache=T, tidy=T, fig.keep='high', echo=F, dpi=100, warnings=F, message=F, comment=NA, warning=F, results='as.is', fig.width = 10, fig.height = 6, cache.lazy=FALSE)
library("RNASeqBits")
library(ggfortify)
library(ggplot2)
library(ggrepel)
library(plyr)
library("ComplexHeatmap")
library(circlize)
## Load in metadata for the samples.
samples <- read.delim("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Metadata/sample_all_metadata.txt")
kable(samples, caption = "VCU20 Sample Metadata")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/PipelineFig.png")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/fastqc_orig1.png")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/fastqc_orig2.png")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/fastqc_orig3.png")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/fastqc_orig4.png")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/fastqc_rrna1.png")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/fastqc_rrna2.png")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/fastqc_rrna3.png")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/star_orig.png")
knitr::include_graphics("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Quality Analysis/figs/star_rrna.png")
#import TPM data and DESeq Results matrix with Fold changes
### Get TPM data
## Gene of interest is TGIF1 Isoform with 272aa
## There are two 272aa Isoforms: TGIF1-202 ENST00000343820.9 and TGIF1-207 ENST00000407501.6
## t(TPM[c("ENST00000618001","ENST00000472042", "ENST00000343820","ENST00000330513","ENST00000405385","ENST00000401449","ENST00000407501","ENST00000551541","ENST00000552383","ENST00000551402","ENST00000549546","ENST00000549780","ENST00000577543","ENST00000550958","ENST00000551333","ENST00000549253","ENST00000546979","ENST00000549468","ENST00000547233","ENST00000551557"),])
TPM <- read.delim("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Data_merged/Salmon_strandedReverse_121719/VCU20_TPM.txt")
## adjust sample names
names(TPM) <- unlist(lapply(names(TPM),function(x) strsplit(x, split="_")[[1]][1]))
## Load in metadata for the samples.
samples <- read.delim("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Metadata/sample_metadata.txt")
row.names(samples) <- samples$Alias
samples <- samples[names(TPM),]
tmp <- all(row.names(samples) == names(TPM))
## Load in transcript to gene name mappings
tx2gn <- read.delim("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Metadata/gencode.v29.metadata.HGNC.txt", header = FALSE)
names(tx2gn) <- c("EnsembleID","GeneSym")
tx2gn$txID <- unlist(lapply(as.character(tx2gn$EnsembleID), function(X) strsplit(X, split="\\.")[[1]][1]))
## Filter TPM data to remove all zero rows.
TPM_filt <- filter.removeZeroSumRows(TPM)
###################### Plot PCA Analysis ###################
pca_TPM <- prcomp(t(TPM_filt), center = TRUE, scale = TRUE)
eigs <- pca_TPM$sdev^2
eigs <- round((eigs / sum(eigs))*100, digits = 2)
pca_df <- as.data.frame(scale(pca_TPM$x))
ps <- ggplot(pca_df, aes(x=PC1, y=PC2, color = samples$Race)) + geom_point(size=3) +
geom_text_repel(aes(label = samples$Alias, colour = samples$Race), size = 2.5, point.padding = .1, segment.color = 'grey') +
theme_classic() +
ggtitle("Figure 11: PCA Analysis of VCU20 Cohort (by Race)") +
xlab(paste("PC1 (",eigs[1],"%)",sep="")) +
ylab(paste("PC2 (",eigs[2],"%)",sep=""))
print(ps)
###################### Plot PCA Analysis ###################
pca_TPM <- prcomp(t(TPM_filt), center = TRUE, scale = TRUE)
eigs <- pca_TPM$sdev^2
eigs <- round((eigs / sum(eigs))*100, digits = 2)
pca_df <- as.data.frame(scale(pca_TPM$x))
ps <- ggplot(pca_df, aes(x=PC1, y=PC2, color = samples$PercentTumor)) + geom_point(size=3) +
geom_text_repel(aes(label = samples$Alias, colour = samples$PercentTumor), size = 2.5, point.padding = .1, segment.color = 'grey') +
theme_classic() +
ggtitle("Figure 12: PCA Analysis of VCU20 Cohort (by Percent Tumor)") +
xlab(paste("PC1 (",eigs[1],"%)",sep="")) +
ylab(paste("PC2 (",eigs[2],"%)",sep=""))
print(ps)
###################### Plot PCA Analysis ###################
TPM_filt2 <- TPM_filt[,-12]
samples2 <- samples[-12,]
TPM_filt2 <- filter.removeZeroSumRows(TPM_filt2)
pca_TPM2 <- prcomp(t(TPM_filt2), center = TRUE, scale = TRUE)
eigs2 <- pca_TPM2$sdev^2
eigs2 <- round((eigs2 / sum(eigs2))*100, digits = 2)
pca_df2 <- as.data.frame(scale(pca_TPM2$x))
ps <- ggplot(pca_df2, aes(x=PC1, y=PC2, color = samples2$PercentTumor)) + geom_point(size=3) +
geom_text_repel(aes(label = samples2$Alias, colour = samples2$PercentTumor), size = 2.5, point.padding = .1, segment.color = 'grey') +
theme_classic() +
ggtitle("Figure 13: PCA Analysis of VCU20 Cohort (minus VPA20)") +
xlab(paste("PC1 (",eigs2[1],"%)",sep="")) +
ylab(paste("PC2 (",eigs2[2],"%)",sep=""))
print(ps)
DE <- read.delim("/Volumes/GoogleDrive/My Drive/Active Collaborations/MIdowu/Analysis/DEGResults2_stranded_PercentTumorCorrected_121719/DESeq2_all_results_PercentTumorCorrected_121719.txt")
idx <- which(DE$padj <= 0.05)
DE_sig <- DE[idx,]
sig_tble <- DE_sig[,c("Ref.TxID","GeneSym","log2FoldChange","padj")]
sig_tble$padj <- format(sig_tble$padj, digits=3)
sig_tble$log2FoldChange <- format(sig_tble$log2FoldChange, digits=2)
kable(sig_tble, caption = "DE Transcripts for B vs W (control)")
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
IDs <- sig_tble$GeneSym[1:2]
IDs
genedesc <- getBM(attributes=c('external_gene_name','description'), filters = 'external_gene_name', values = IDs, mart =ensembl)
genedesc
genedesc
genedesc <- getBM(attributes=c('external_gene_name','description', 'function'), filters = 'external_gene_name', values = IDs, mart =ensembl)
listAttributes()
listAttributes(ensembl)
?getBM
listFilters()
listFilters(ensemble)
listFilters(ensembl)
atts <- listAttributes(ensembl)
View(atts)
IDs <- sig_tble$Ref.TxID[1:2]
genedesc <- getBM(attributes=c('ensembl_transcript_id','description'), filters = 'ensembl_transcript_id', values = IDs, mart =ensembl)
genedesc
IDs <- sig_tble$GeneSym
genedesc <- getBM(attributes=c('external_gene_name','description'), filters = 'external_gene_name', values = IDs, mart =ensembl)
length(IDs)
length(genedesc)
dim(genedesc)
View(genedesc)
unique(IDs)
length(unique(IDs))
?merge
sig_tble2 <- merge(sig_tble, genedesc, by.x = "GeneSym", by.y = "external_gene_name", all.x=TRUE, all.y = FALSE)
View(sig_tble2)
genedesc <- getBM(attributes=c('external_gene_name','description', 'wikigene_description'), filters = 'external_gene_name', values = IDs, mart =ensembl)
sig_tble2 <- merge(sig_tble, genedesc, by.x = "GeneSym", by.y = "external_gene_name", all.x=TRUE, all.y = FALSE)
View(sig_tble2)
genedesc <- getBM(attributes=c('external_gene_name','wikigene_description','family_description', '	transcript_gencode_basic'), filters = 'external_gene_name', values = IDs, mart =ensembl)
genedesc <- getBM(attributes=c('external_gene_name','wikigene_description','family_description'), filters = 'external_gene_name', values = IDs, mart =ensembl)
sig_tble2 <- merge(sig_tble, genedesc, by.x = "GeneSym", by.y = "external_gene_name", all.x=TRUE, all.y = FALSE)
View(sig_tble2)
View(sig_tble2)
genedesc <- getBM(attributes=c('external_gene_name','wikigene_description'), filters = 'external_gene_name', values = IDs, mart =ensembl)
genedesc <- getBM(attributes=c('external_gene_name','wikigene_description'), filters = 'external_gene_name', values = IDs, mart =ensembl)
sig_tble2 <- merge(sig_tble, genedesc, by.x = "GeneSym", by.y = "external_gene_name", all.x=TRUE, all.y = FALSE)
library(fgsea)
install.packages("fgsea")
BiocManager::install('fgsea')
library("biomaRt")
ensembl<-  useMart("ensembl", dataset="hsapiens_gene_ensembl")
values<- c("NM_001101", "NM_001256799", "NM_000594")
getBM(attributes=c("refseq_mrna", "ensembl_gene_id", "hgnc_symbol"), filters = "refseq_mrna", values = values, mart= ensembl)
values<- c("NM_170695", "NM_173207", "NM_003244", "BC031268")
getBM(attributes=c("refseq_mrna", "ensembl_gene_id", "hgnc_symbol"), filters = "refseq_mrna", values = values, mart= ensembl)
getBM(attributes=c("refseq_mrna", "ensembl_transcript_id", "hgnc_symbol"), filters = "refseq_mrna", values = values, mart= ensembl)
library(DEXSeq)
pythonScriptsDir = system.file( "python_scripts", package="DEXSeq" )
list.files(pythonScriptsDir)
system.file( "python_scripts", package="DEXSeq", mustWork=TRUE )
setwd("~/Desktop/CCTR_Git_Repos/CClevenger_TCGA-BRCA/src")
library(DESeq2)
data_dir <- "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_1222_RNASeq_HTSeq-counts_022620/"
data_dir <- "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_1222_RNASeq_HTSeq-counts_022620/"
setwd("~/Desktop/CCTR_Git_Repos/CClevenger_TCGA-BRCA/src")
file_list <- list.files(data_dir)
file_list
sample_metadata <- read.delim(file = "..//Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_ContrastMetadata_MASTER_022420.tsv", header = TRUE, row.names = 1)
sample_metadata <- read.delim(file = "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_ContrastMetadata_MASTER_022420.tsv", header = TRUE, row.names = 1)
View(sample_metadata)
sample_metadata <- read.delim(file = "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_ContrastMetadata_MASTER_022420.tsv", header = TRUE, row.names = 1)
View(sample_metadata)
file_list
file_list <- sample_metadata$count.file.name
file_list
file_list <- as.character(sample_metadata$count.file.name)
file_list
file_list <- paste(data_dir, as.character(sample_metadata$count.file.name), sep = "")
file_list
?DESeqDataSetFromHTSeqCount
names(sample_metadata)
sample_metadata <- read.delim(file = "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_ContrastMetadata_MASTER_022420.tsv", header = TRUE)
st_intermediate_expressed <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$intermediate.expressed)
View(st_intermediate_expressed)
st_wt.high.low <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$wt.high.low)
View(st_wt.high.low)
st_intermediate.high.low <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$intermediate.high.low)
View(st_intermediate.high.low)
## subset on only those that have a value
st_intermediate.high.low <- st_intermediate.high.low[st_intermediate.high.low$condition %in% c("high","low"),]
st_intermediate.high.low <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$intermediate.high.low)
## subset on only those that have a value
st_intermediate.high.low <- st_intermediate.high.low[st_intermediate.high.low$condition %in% c("High","Low"),]
View(st_intermediate.high.low)
### Now do the same for the Hormone receptor positive data.
sample_metadata_HRpos <- sample_metadata[sample_metadata$hormone.status == "Positive",]
View(sample_metadata_HRpos)
mean(sample_metadata_HRpos$wt.expression)
mean(sample_metadata_HRpos$intermediate.expression)
mean(sample_metadata_HRpos[sample_metadata$intermediate.expression > 0,])
sample_metadata_HRpos
sample_metadata <- read.delim(file = "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_ContrastMetadata_MASTER_022420.tsv", header = TRUE)
View(sample_metadata)
st_intermediate_expressed <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$intermediate.expressed)
st_wt.high.low <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$wt.high.low)
st_intermediate.high.low <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$intermediate.high.low)
## subset on only those that have a value
st_intermediate.high.low <- st_intermediate.high.low[st_intermediate.high.low$condition %in% c("High","Low"),]
### Now do the same for the Hormone receptor positive data.
sample_metadata_HRpos <- sample_metadata[sample_metadata$hormone.status == "Positive",]
st_HRpos_intermediate_expressed <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos_intermediate.expressed)
st_HRpos_wt.high.low <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos_wt.high.low)
st_HRpos_intermediate.high.low <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos_intermediate.high.low)
### Now do the same for the Hormone receptor positive data.
sample_metadata_HRpos <- sample_metadata[sample_metadata$hormone.status == "Positive",]
st_HRpos_intermediate_expressed <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos_intermediate.expressed)
sample_metadata_HRpos$my.uuid
sample_metadata_HRpos$count.file.name
sample_metadata_HRpos$HRpos_wt.high.low
st_HRpos_wt.high.low <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos.wt.high.low)
st_HRpos_intermediate.high.low <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos.intermediate.high.low)
st_HRpos_intermediate_expressed <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos.intermediate.expressed)
## subset on only those that have a value
st_HRpos_intermediate.high.low <- st_HRpos_intermediate.high.low[st_HRpos_intermediate.high.low$condition %in% c("High","Low"),]
View(st_HRpos_intermediate.high.low)
#### Time for DESeq Contrasts
## st_intermediate_expressed
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = st_intermediate_expressed, directory = data_dir, design= ~ condition)
data_dir
data_dir <- "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_1222_RNASeq_HTSeq-counts_022620"
#### Time for DESeq Contrasts
## st_intermediate_expressed
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = st_intermediate_expressed, directory = data_dir, design= ~ condition)
#### Time for DESeq Contrasts
## st_intermediate_expressed
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = st_intermediate_expressed, directory = data_dir, design= ~ condition)
#### Time for DESeq Contrasts
## st_intermediate_expressed
dds_intermediate_expressed <- DESeqDataSetFromHTSeqCount(sampleTable = st_intermediate_expressed, directory = data_dir, design= ~ condition)
sample_metadata <- read.delim(file = "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_ContrastMetadata_MASTER_022420.tsv", header = TRUE)
file_list <- paste(data_dir, as.character(sample_metadata$count.file.name), sep = "")
st_intermediate_expressed <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$intermediate.expressed)
st_wt.high.low <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$wt.high.low)
st_intermediate.high.low <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$intermediate.high.low)
## subset on only those that have a value
st_intermediate.high.low <- st_intermediate.high.low[st_intermediate.high.low$condition %in% c("High","Low"),]
### Now do the same for the Hormone receptor positive data.
sample_metadata_HRpos <- sample_metadata[sample_metadata$hormone.status == "Positive",]
st_HRpos_intermediate_expressed <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos.intermediate.expressed)
st_HRpos_wt.high.low <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos.wt.high.low)
st_HRpos_intermediate.high.low <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos.intermediate.high.low)
## subset on only those that have a value
st_HRpos_intermediate.high.low <- st_HRpos_intermediate.high.low[st_HRpos_intermediate.high.low$condition %in% c("High","Low"),]
#### Time for DESeq Contrasts
## st_intermediate_expressed
dds_intermediate_expressed <- DESeqDataSetFromHTSeqCount(sampleTable = st_intermediate_expressed, directory = data_dir, design= ~ condition)
# Amy Olex
# 2/26/20
# Script to perform DESeq2 DEG analyses on BRCA data.
#
# Part of this code comes from the tutorial at http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#htseq
library(DESeq2)
setwd("~/Desktop/CCTR_Git_Repos/CClevenger_TCGA-BRCA/src")
data_dir <- "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_1222_RNASeq_HTSeq-counts_022620"
sample_metadata <- read.delim(file = "/Volumes/GoogleDrive/My Drive/Active Collaborations/CClevanger/BRCA_TCGA_DEG_Analyses 022420/BRCA_ContrastMetadata_MASTER_022420.tsv", header = TRUE)
file_list <- paste(data_dir, as.character(sample_metadata$count.file.name), sep = "")
st_intermediate_expressed <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$intermediate.expressed)
st_wt.high.low <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$wt.high.low)
st_intermediate.high.low <- data.frame(sampleName = sample_metadata$my.uuid, fileName = sample_metadata$count.file.name, condition = sample_metadata$intermediate.high.low)
## subset on only those that have a value
st_intermediate.high.low <- st_intermediate.high.low[st_intermediate.high.low$condition %in% c("High","Low"),]
### Now do the same for the Hormone receptor positive data.
sample_metadata_HRpos <- sample_metadata[sample_metadata$hormone.status == "Positive",]
st_HRpos_intermediate_expressed <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos.intermediate.expressed)
st_HRpos_wt.high.low <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos.wt.high.low)
st_HRpos_intermediate.high.low <- data.frame(sampleName = sample_metadata_HRpos$my.uuid, fileName = sample_metadata_HRpos$count.file.name, condition = sample_metadata_HRpos$HRpos.intermediate.high.low)
## subset on only those that have a value
st_HRpos_intermediate.high.low <- st_HRpos_intermediate.high.low[st_HRpos_intermediate.high.low$condition %in% c("High","Low"),]
#### Time for DESeq Contrasts
## st_intermediate_expressed
dds_intermediate_expressed <- DESeqDataSetFromHTSeqCount(sampleTable = st_intermediate_expressed, directory = data_dir, design= ~ condition)
View(st_HRpos_intermediate_expressed)
View(st_HRpos_intermediate_expressed)
## filter out low count rows
keep <- rowSums(counts(dds_intermediate_expressed)) >= 10
dds_intermediate_expressed
dds_intermediate_expressed <- dds_intermediate_expressed[keep,]
dds_intermediate_expressed
## set the control condition to the cohort that is not expressed, so label "0"
dds_intermediate_expressed$condition <- relevel(dds_intermediate_expressed$condition, ref = "No")
## Now lets do the DE Analysis
dds_intermediate_expressed <- DESeq(dds_intermediate_expressed)
